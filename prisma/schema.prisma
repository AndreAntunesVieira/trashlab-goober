generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "sqlite" // uncomment this line to work local with sqlite file
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserRole {
  id    String @id
  name  String
  roles User[]
}

model CarCategory {
  id         String @id @default(cuid())
  name       String
  multiplier Float
  users      User[]
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  roleId        String
  role          UserRole     @relation(fields: [roleId], references: [id])
  licensePlate  String?
  riding        Boolean
  carCategory   CarCategory? @relation(fields: [carCategoryId], references: [id])
  carCategoryId String?
  driverRides   Ride[]
}

model Ride {
  id                String   @id @default(cuid())
  pickup            String
  dropoff           String
  startsAt          DateTime
  duration          Float
  distance          Float
  dynamicMultiplier Float
  price             Float
  riderId           String
  driverId          String
  driver            User     @relation(fields: [driverId], references: [id])
  status            String
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
